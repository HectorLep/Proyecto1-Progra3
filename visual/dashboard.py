import streamlit as st
import pandas as pd
from model.graph import Graph
from domain.cliente import Client
from domain.orden import Order
from domain.ruta import Route
from tda.avl import avl_insert
from tda.mapa_hash import HashMap
from sim.rutas import RouteManager, RouteTracker, RouteOptimizer, OrderSimulator
import random
import time
from visual.AVLVisualizer import AVLTreeVisualizer
from visual.AVLVisualizer import get_tree_traversals
from validaciones.validaciones import *
from visual.networkx_adapter import crear_visualizacion_red
from visual.AVLVisualizer import create_pie_chart, create_bar_chart, create_horizontal_bar_chart
import numpy as np
import io
import sys

# Remove the st.set_page_config() call from here since it's already in app.py

# Inicializar estado de sesi√≥n para persistencia de pesta√±as
if 'active_tab' not in st.session_state:
    st.session_state.active_tab = 0

st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #1e3c72 0%, #2a5298 100%);
        color: white;
        padding: 1rem;
        border-radius: 10px;
        margin-bottom: 2rem;
        text-align: center;
    }
    .metric-card {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #007bff;
    }
    .status-success {
        color: #28a745;
        font-weight: bold;
    }
    .status-failed {
        color: #dc3545;
        font-weight: bold;
    }
    .route-card {
        background: #ffffff;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 1rem;
        margin: 0.5rem 0;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
</style>
""", unsafe_allow_html=True)

@st.cache_data
def ejecutar_simulacion(num_nodos, num_aristas, num_ordenes):
    """Ejecutar la simulaci√≥n principal y retornar resultados"""
    g = Graph(directed=True)
    g.generate_random_graph(num_nodes=num_nodos, num_edges=num_aristas)
    
    manager = RouteManager(g)
    tracker = RouteTracker()
    optimizer = RouteOptimizer(tracker, manager)
    simulator = OrderSimulator(manager, tracker)
    
    # Capturar salida de la simulaci√≥n
    old_stdout = sys.stdout
    sys.stdout = captured_output = io.StringIO()
    
    simulator.process_orders(num_ordenes)
    
    sys.stdout = old_stdout
    salida_simulacion = captured_output.getvalue()
    
    # Obtener estad√≠sticas
    patrones_ruta = optimizer.analyze_route_patterns()
    reportes_optimizacion = optimizer.get_optimization_report()
    
    # Estad√≠sticas del grafo
    estadisticas_nodos = {
        'almacen': len([v for v in g.vertices() if v.type() == 'warehouse']),
        'recarga': len([v for v in g.vertices() if v.type() == 'recharge']),
        'cliente': len([v for v in g.vertices() if v.type() == 'client'])
    }
    
    return g, patrones_ruta, reportes_optimizacion, salida_simulacion, tracker, estadisticas_nodos

def crear_avl_desde_rutas(tracker):
    """Crear un √°rbol AVL con las rutas m√°s frecuentes"""   
    avl_root = None
    rutas_frecuentes = tracker.get_most_frequent_routes(15)  # Obtener m√°s rutas para el AVL
    
    for ruta_hash, frecuencia in rutas_frecuentes:
        # Usar el hash de la ruta como clave para el AVL
        avl_root = avl_insert(avl_root, ruta_hash)
    
    return avl_root

def renderizar_pestana_simulacion(parametros, estadisticas_nodos, salida_simulacion):
    """Renderizar la pesta√±a de resultados de simulaci√≥n"""
    st.header("üìä Resultados de la Simulaci√≥n")
    
    # M√©tricas principales
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Total de Nodos", parametros['num_nodos'], delta=None)
    with col2:
        st.metric("Total de Aristas", parametros['num_aristas'], delta=None)
    with col3:
        st.metric("√ìrdenes Procesadas", parametros['num_ordenes'], delta=None)
    with col4:
        entregas_exitosas = salida_simulacion.count("Estado: Entregado")
        st.metric("Entregas Exitosas", entregas_exitosas, 
                 delta=f"{(entregas_exitosas/parametros['num_ordenes'])*100:.1f}%" if parametros['num_ordenes'] > 0 else "0%")
    
    # Distribuci√≥n de nodos
    st.subheader("üìä Distribuci√≥n de Nodos")
    col1, col2 = st.columns(2)
    
    with col1:
        # Gr√°fico circular
        fig_pie = create_pie_chart(
            values=list(estadisticas_nodos.values()),
            labels=['Almac√©n', 'Recarga', 'Cliente'],
            title="Distribuci√≥n por Tipo de Nodo",
            colors=['#8B4513', '#FFA500', '#32CD32']
        )
        st.pyplot(fig_pie)
    
    with col2:
        # Gr√°fico de barras
        fig_bar = create_bar_chart(
            x_data=['Almac√©n', 'Recarga', 'Cliente'],
            y_data=list(estadisticas_nodos.values()),
            title="Cantidad de Nodos por Tipo",
            colors=['#8B4513', '#FFA500', '#32CD32'],
            xlabel="Tipo de Nodo",
            ylabel="Cantidad"
        )
        st.pyplot(fig_bar)

def renderizar_pestana_red(grafo):
    """Renderizar la pesta√±a de exploraci√≥n de red"""
    st.header("üåê Visualizaci√≥n de la Red")
    
    # Inicializar estado de c√°lculo de rutas
    if 'ruta_calculada' not in st.session_state:
        st.session_state.ruta_calculada = None
    if 'mensaje_ruta' not in st.session_state:
        st.session_state.mensaje_ruta = ""
    
    # Crear y mostrar visualizaci√≥n con Matplotlib
    ruta_resaltada = st.session_state.ruta_calculada.path if st.session_state.ruta_calculada else None
    fig = crear_visualizacion_red(grafo, ruta_destacada=ruta_resaltada)
    st.pyplot(fig)
    
    # Panel de c√°lculo de rutas
    st.subheader("üß≠ Calcular Ruta")
    
    # Obtener nodos disponibles
    almacenes = [v.element() for v in grafo.vertices() if v.type() == 'warehouse']
    clientes = [v.element() for v in grafo.vertices() if v.type() == 'client']
    
    # Crear un formulario para evitar re-ejecuci√≥n en cada selecci√≥n
    with st.form("formulario_calculo_ruta"):
        col1, col2, col3 = st.columns(3)
        
        with col1:
            nodo_origen = st.selectbox("Nodo de Origen", options=almacenes, key="origen_form")
        with col2:
            nodo_destino = st.selectbox("Nodo de Destino", options=clientes, key="destino_form")
        with col3:
            boton_calcular = st.form_submit_button("üîç Calcular Ruta", type="secondary")
    
    # Manejar c√°lculo de ruta
    if boton_calcular:
        if nodo_origen and nodo_destino:
            manager = RouteManager(grafo)
            es_valido, mensaje_error = validar_calculo_ruta(grafo, nodo_origen, nodo_destino)
            if not es_valido:
                st.session_state.mensaje_ruta = f"‚ùå {mensaje_error}"
                st.session_state.ruta_calculada = None
            else:
                ruta = manager.find_route_with_recharge(nodo_origen, nodo_destino)
                if ruta:
                    st.session_state.ruta_calculada = ruta
                    camino_ruta = ' ‚Üí '.join(ruta.path)
                    st.session_state.mensaje_ruta = f"‚úÖ Ruta encontrada: {camino_ruta}\nüí∞ Costo total: {ruta.total_cost}"
                    if ruta.recharge_stops:
                        st.session_state.mensaje_ruta += f"\nüîã Paradas de recarga: {', '.join(ruta.recharge_stops)}"
                else:
                    st.session_state.mensaje_ruta = "‚ùå ¬°No se encontr√≥ una ruta v√°lida!"
                    st.session_state.ruta_calculada = None
            # Forzar re-ejecuci√≥n para actualizar visualizaci√≥n
            st.rerun()
    
    # Mostrar mensaje de ruta
    if st.session_state.mensaje_ruta:
        if "‚úÖ" in st.session_state.mensaje_ruta:
            st.success(st.session_state.mensaje_ruta)
        else:
            st.error(st.session_state.mensaje_ruta)

def renderizar_pestana_clientes_ordenes(tracker):
    """Renderizar la pesta√±a de clientes y √≥rdenes"""
    st.header("üë• Clientes y √ìrdenes")
    
    # Estad√≠sticas de clientes
    estadisticas_clientes = tracker.get_client_stats()
    if estadisticas_clientes:
        st.subheader("üìä Mejores Clientes por √ìrdenes")
        df_clientes = pd.DataFrame(estadisticas_clientes, columns=['ID Cliente', 'Total √ìrdenes'])
        st.dataframe(df_clientes.head(10), use_container_width=True)
        
        # Gr√°fico de clientes
        mejores_clientes = df_clientes.head(10)
        fig_clientes = create_bar_chart(
            x_data=mejores_clientes['ID Cliente'].astype(str),
            y_data=mejores_clientes['Total √ìrdenes'],
            title='Top 10 Clientes por Volumen de √ìrdenes',
            colors=['#007bff'] * len(mejores_clientes),
            xlabel='ID Cliente',
            ylabel='Total √ìrdenes'
        )
        st.pyplot(fig_clientes)
    
    # Estad√≠sticas de √≥rdenes
    estadisticas_ordenes = tracker.get_order_stats()
    if estadisticas_ordenes:
        st.subheader("üí∞ √ìrdenes por Costo")
        datos_ordenes = [(oid, order.total_cost, order.status) for oid, order in estadisticas_ordenes[:10]]
        df_ordenes = pd.DataFrame(datos_ordenes, columns=['ID Orden', 'Costo Total', 'Estado'])
        st.dataframe(df_ordenes, use_container_width=True)
        
        # Gr√°fico de costo de √≥rdenes
        if len(df_ordenes) > 0:
            fig_ordenes = create_bar_chart(
                x_data=df_ordenes['ID Orden'].astype(str),
                y_data=df_ordenes['Costo Total'],
                title='Top 10 √ìrdenes por Costo',
                colors=['#28a745' if estado == 'Delivered' else '#dc3545' 
                       for estado in df_ordenes['Estado']],
                xlabel='ID Orden',
                ylabel='Costo Total'
            )
            st.pyplot(fig_ordenes)

def renderizar_pestana_analisis_rutas(tracker):
    """Renderizar la pesta√±a de an√°lisis de rutas con visualizaci√≥n AVL"""
    st.header("üìä An√°lisis de Rutas")
    
    # Mostrar informaci√≥n general de rutas
    st.subheader("üõ£Ô∏è Informaci√≥n General de Rutas")
    
    # Rutas m√°s frecuentes
    rutas_frecuentes = tracker.get_most_frequent_routes(10)
    if rutas_frecuentes:
        st.subheader("üî• Rutas M√°s Frecuentes")
        for i, (ruta, freq) in enumerate(rutas_frecuentes, 1):
            st.markdown(f"""
            <div class="route-card">
                <strong>{i}. Hash de ruta:</strong> {ruta} | <span style="color: #007bff;">Frecuencia: {freq}</span>
            </div>
            """, unsafe_allow_html=True)
    
    # Visualizaci√≥n del √Årbol AVL
    st.subheader("üå≥ √Årbol AVL de Rutas")
    
    # Crear el √°rbol AVL con las rutas
    avl_root = crear_avl_desde_rutas(tracker)
    
    if avl_root is not None:
        # Crear visualizador AVL
        visualizador = AVLTreeVisualizer()
        
        # Convertir las rutas frecuentes a claves para el √°rbol de demostraci√≥n
        rutas_keys = [ruta_hash for ruta_hash, _ in rutas_frecuentes[:10]]  # Usar solo los primeros 10
        
        # Crear √°rbol de muestra con las claves de ruta
        if rutas_keys:
            arbol_muestra = visualizador.create_sample_tree(rutas_keys)
            
            # Crear la visualizaci√≥n del √°rbol
            fig_avl = visualizador.visualize_tree(arbol_muestra, title="√Årbol AVL de Rutas Frecuentes")
            
            if fig_avl is not None:
                st.pyplot(fig_avl)
                
                # Informaci√≥n adicional sobre el AVL
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    altura_arbol = visualizador._get_height(arbol_muestra)
                    st.metric("Altura del √Årbol", altura_arbol)
                
                with col2:
                    def count_nodes(node):
                        if not node:
                            return 0
                        return 1 + count_nodes(node.left) + count_nodes(node.right)
                    
                    total_nodos = count_nodes(arbol_muestra)
                    st.metric("Total de Nodos", total_nodos)
                
                with col3:
                    factor_balance = arbol_muestra.balance_factor if arbol_muestra else 0
                    st.metric("Factor de Balance (ra√≠z)", factor_balance)
                
                # Mostrar informaci√≥n detallada del √°rbol
                with st.expander("üîç Informaci√≥n Detallada del √Årbol AVL"):
                    st.markdown("**Caracter√≠sticas del √Årbol AVL:**")
                    st.markdown("- **Balanceado**: El √°rbol mantiene el balance autom√°ticamente")
                    st.markdown("- **Clave**: Hash de ruta (identificador √∫nico)")
                    st.markdown("- **Valor**: Frecuencia de uso de la ruta")
                    st.markdown("- **Ordenamiento**: Por hash de ruta (orden lexicogr√°fico)")
                    
                    # Mostrar recorridos del √°rbol
                    st.markdown("**Recorridos del √Årbol:**")
                    
                    # Obtener recorridos usando el visualizador
                    traversals = get_tree_traversals(visualizador, arbol_muestra)
                    
                    # Recorrido inorden
                    st.text(f"Inorden: {traversals['inorder']}")
                    
                    # Recorrido preorden
                    st.text(f"Preorden: {traversals['preorder']}")
                    
                    # Recorrido postorden
                    st.text(f"Postorden: {traversals['postorder']}")
            else:
                st.warning("No se pudo generar la visualizaci√≥n del √°rbol AVL")
        else:
            st.info("No hay rutas suficientes para visualizar")
    else:
        st.info("No hay suficientes datos de rutas para construir el √°rbol AVL")
    
    # Estad√≠sticas de visitas a nodos (mantener esta secci√≥n)
    visitas_nodos = tracker.get_node_visit_stats()
    if visitas_nodos:
        st.subheader("üìç Nodos M√°s Visitados")
        df_visitas = pd.DataFrame(visitas_nodos[:10], columns=['Nodo', 'Visitas'])
        
        col1, col2 = st.columns(2)
        with col1:
            st.dataframe(df_visitas, use_container_width=True)
        with col2:
            fig_visitas = create_bar_chart(
                x_data=df_visitas['Nodo'].astype(str),
                y_data=df_visitas['Visitas'],
                title='Frecuencia de Visitas por Nodo',
                colors=['#4ecdc4'] * len(df_visitas),
                xlabel='Nodo',
                ylabel='Visitas'
            )
            st.pyplot(fig_visitas)

def renderizar_pestana_estadisticas(grafo, patrones_ruta, reportes_optimizacion, salida_simulacion):
    """Renderizar la pesta√±a de estad√≠sticas"""
    st.header("üìà Estad√≠sticas")
    
    # M√©tricas avanzadas
    col1, col2, col3 = st.columns(3)
    
    total_aristas = len(list(grafo.edges()))
    total_vertices = len(list(grafo.vertices()))
    
    with col1:
        st.metric("Densidad del Grafo", f"{(total_aristas / (total_vertices * (total_vertices - 1))):.3f}")
    with col2:
        grado_promedio = (2 * total_aristas) / total_vertices if total_vertices > 0 else 0
        st.metric("Grado Promedio", f"{grado_promedio:.2f}")
    with col3:
        conectividad = "Conectado" if grafo.is_connected() else "Desconectado"
        st.metric("Conectividad del Grafo", conectividad)
    
    # An√°lisis de distribuci√≥n de grados
    st.subheader("üìä An√°lisis de Distribuci√≥n de Grados")
    
    # Calcular distribuci√≥n de grados
    grados = []
    for vertice in grafo.vertices():
        grado_entrada = len(list(grafo.incident_edges(vertice, outgoing=False)))
        grado_salida = len(list(grafo.incident_edges(vertice, outgoing=True)))
        grados.append(grado_entrada + grado_salida)
    
    if grados:
        # Histograma de distribuci√≥n de grados
        import matplotlib.pyplot as plt
        fig, ax = plt.subplots(figsize=(10, 6))
        ax.hist(grados, bins=max(1, len(set(grados))), color='#45b7d1', alpha=0.7, edgecolor='black')
        ax.set_title('Distribuci√≥n de Grados de Nodos', fontsize=14, fontweight='bold')
        ax.set_xlabel('Grado', fontsize=12)
        ax.set_ylabel('Frecuencia', fontsize=12)
        ax.grid(True, alpha=0.3)
        plt.tight_layout()
        st.pyplot(fig)
    
    # An√°lisis detallado
    st.subheader("üìã An√°lisis Detallado")
    
    if patrones_ruta:
        with st.expander("üîç An√°lisis de Patrones de Ruta", expanded=True):
            for patron in patrones_ruta:
                st.text(patron)
    
    # Registro de simulaci√≥n
    with st.expander("üìú Registro de Simulaci√≥n"):
        st.text_area("Salida de Simulaci√≥n", salida_simulacion, height=300)
    
    # Reportes de optimizaci√≥n
    if reportes_optimizacion:
        with st.expander("‚ö° Reportes de Optimizaci√≥n"):
            for reporte in reportes_optimizacion:
                st.text(reporte)

def main():
    """Aplicaci√≥n principal del dashboard"""
    if 'active_tab' not in st.session_state:
        st.session_state.active_tab = 0
    # T√≠tulo principal
    st.markdown("""
    <div class="main-header">
        <h1>üöÅ Simulador de Log√≠stica con Drones - Correos Chile</h1>
        <p>Optimizaci√≥n Avanzada de Rutas y An√°lisis de Redes</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Barra lateral para configuraci√≥n
    with st.sidebar:
        st.header("‚öôÔ∏è Inicializar Simulaci√≥n")
        
        st.subheader("Proporciones de Roles de Nodos")
        porcentaje_almacen = st.slider("üì¶ Nodos de Almac√©n", 10, 40, 20, help="Porcentaje de nodos almac√©n")
        porcentaje_recarga = st.slider("üîã Nodos de Recarga", 10, 40, 20, help="Porcentaje de estaciones de recarga")
        porcentaje_cliente = 100 - porcentaje_almacen - porcentaje_recarga
        st.info(f"üë• Nodos Cliente: {porcentaje_cliente}%")
        
        st.subheader("Par√°metros de Red")
        num_nodos = st.slider("N√∫mero de Nodos", 10, 150, 15, step=5)
        num_aristas = st.slider("N√∫mero de Aristas", 10, 300, 28, step=2)
        num_ordenes = st.slider("N√∫mero de √ìrdenes", 10, 500, 10, step=5)
        
        st.subheader("Nodos Cliente Derivados")
        clientes_derivados = int(num_nodos * 0.6)
        st.metric("Nodos Cliente Estimados", f"{clientes_derivados} (60% de {num_nodos})")
        
        boton_ejecutar = st.button("üöÄ Iniciar Simulaci√≥n", type="primary", use_container_width=True)
    
    # Inicializar estado de sesi√≥n para datos de simulaci√≥n
    if 'datos_simulacion' not in st.session_state:
        st.session_state.datos_simulacion = None
    
    # Contenido principal
    if boton_ejecutar:
        with st.spinner("Inicializando simulaci√≥n..."):
            # Ejecutar simulaci√≥n y guardar en estado de sesi√≥n
            st.session_state.datos_simulacion = ejecutar_simulacion(num_nodos, num_aristas, num_ordenes)
            st.session_state.parametros_simulacion = {
                'num_nodos': num_nodos,
                'num_aristas': num_aristas,
                'num_ordenes': num_ordenes
            }
            # Add the following lines here:
            st.session_state.ruta_calculada = None
            st.session_state.mensaje_ruta = ""
    
    # Verificar si existen datos de simulaci√≥n
    if st.session_state.datos_simulacion is not None:
        grafo, patrones_ruta, reportes_optimizacion, salida_simulacion, tracker, estadisticas_nodos = st.session_state.datos_simulacion
        parametros = st.session_state.parametros_simulacion
        
        # Navegaci√≥n por pesta√±as con estado de sesi√≥n
        nombres_pestanas = ["üéØ Ejecutar Simulaci√≥n", "üåê Explorar Red", "üë• Clientes y √ìrdenes", "üìä An√°lisis de Rutas", "üìà Estad√≠sticas"]
        
        # Crear pesta√±as pero manejar selecci√≥n manualmente
        pestana_seleccionada = st.selectbox("Seleccionar Pesta√±a:", nombres_pestanas, 
                                           index=st.session_state.active_tab,
                                           key="selector_pestana")
        
        # Actualizar pesta√±a activa en estado de sesi√≥n
        if pestana_seleccionada != nombres_pestanas[st.session_state.active_tab]:
            st.session_state.active_tab = nombres_pestanas.index(pestana_seleccionada)
        
        st.markdown("---")
        
        # Renderizar pesta√±a apropiada
        if st.session_state.active_tab == 0:  # Ejecutar Simulaci√≥n
            renderizar_pestana_simulacion(parametros, estadisticas_nodos, salida_simulacion)
        elif st.session_state.active_tab == 1:  # Explorar Red
            renderizar_pestana_red(grafo)
        elif st.session_state.active_tab == 2:  # Clientes y √ìrdenes
            renderizar_pestana_clientes_ordenes(tracker)
        elif st.session_state.active_tab == 3:  # An√°lisis de Rutas
            renderizar_pestana_analisis_rutas(tracker)
        elif st.session_state.active_tab == 4:  # Estad√≠sticas
            renderizar_pestana_estadisticas(grafo, patrones_ruta, reportes_optimizacion, salida_simulacion)
    
    else:
        # Pantalla inicial
        st.info("üëà Configura los par√°metros de simulaci√≥n en la barra lateral y haz clic en 'Iniciar Simulaci√≥n' para comenzar!")
        
        # Informaci√≥n del sistema
        col1, col2, col3 = st.columns(3)
        with col1:
            st.markdown("""
            ### üì¶ Nodos de Almac√©n
            - Instalaciones de almac√©n
            - Centros de distribuci√≥n de paquetes
            - Puntos de entrega inicial
            """)
        
        with col2:
            st.markdown("""
            ### üîã Nodos de Recarga  
            - Estaciones de carga de bater√≠as
            - Centros de mantenimiento de drones
            - Puntos de suministro de energ√≠a
            """)
        
        with col3:
            st.markdown("""
            ### üë• Nodos Cliente
            - Destinos de entrega
            - Ubicaciones de clientes
            - Puntos de entrega final
            """)
    
    # Pie de p√°gina
    st.markdown("---")
    st.markdown("**üöÅ Simulador de Log√≠stica con Drones** - Optimizaci√≥n log√≠stica avanzada para Correos Chile")

if __name__ == "__main__":
    main()